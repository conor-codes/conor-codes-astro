---
// Lightbox.astro - Add this to your base layout or archive page
---

<div id="lightbox" class="lightbox">
  <button class="lb-close" aria-label="Close">ESC</button>
  <button class="lb-btn lb-prev" aria-label="Previous">‹</button>
  <div class="lightbox__imgwrap">
    <img class="lightbox__img" alt="">
  </div>
  <button class="lb-btn lb-next" aria-label="Next">›</button>
  <div class="lb-count" aria-live="polite"></div>
</div>

<style is:global>
  .lightbox {
    position: fixed;
    inset: 0;
    z-index: 9999;
    display: none;
    place-items: center;
    background: rgba(0, 0, 0, 0.92);
    backdrop-filter: blur(4px);
    animation: fadeIn 0.2s ease;
  }

  .lightbox.open {
    display: grid;
  }

  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  .lightbox__imgwrap {
    max-width: 92vw;
    max-height: 86vh;
    display: grid;
    place-items: center;
  }

  .lightbox__img {
    max-width: 100%;
    max-height: 86vh;
    object-fit: contain;
    border: 1px solid #2f2f2f;
    border-radius: 8px;
    background: #0b0b0b;
    animation: scaleIn 0.3s ease;
  }

  @keyframes scaleIn {
    from {
      opacity: 0;
      transform: scale(0.95);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  .lb-btn {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 48px;
    height: 48px;
    border-radius: 8px;
    border: 1px solid #2f2f2f;
    background: rgba(17, 17, 17, 0.9);
    color: #7cb342;
    font-size: 28px;
    line-height: 0;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .lb-btn:hover:not(:disabled) {
    background: rgba(124, 179, 66, 0.2);
    border-color: #7cb342;
  }

  .lb-btn:disabled {
    opacity: 0.3;
    cursor: not-allowed;
  }

  .lb-prev {
    left: 24px;
  }

  .lb-next {
    right: 24px;
  }

  .lb-close {
    position: absolute;
    top: 20px;
    right: 20px;
    width: 56px;
    height: 36px;
    border-radius: 8px;
    border: 1px solid #2f2f2f;
    background: rgba(17, 17, 17, 0.9);
    color: #999;
    font-size: 12px;
    font-family: 'Consolas', 'Monaco', monospace;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .lb-close:hover {
    background: rgba(124, 179, 66, 0.2);
    border-color: #7cb342;
    color: #7cb342;
  }

  .lb-count {
    position: absolute;
    bottom: 24px;
    left: 50%;
    transform: translateX(-50%);
    font-size: 13px;
    color: #a6b2a6;
    background: rgba(17, 17, 17, 0.9);
    border: 1px solid #2f2f2f;
    padding: 6px 12px;
    border-radius: 6px;
    font-family: 'Consolas', 'Monaco', monospace;
  }

  @media (max-width: 768px) {
    .lb-prev {
      left: 12px;
    }

    .lb-next {
      right: 12px;
    }

    .lb-btn {
      width: 42px;
      height: 42px;
      font-size: 24px;
    }

    .lb-close {
      top: 12px;
      right: 12px;
    }
  }
</style>

<script>
  class Lightbox {
    private lb: HTMLElement | null = null;
    private img: HTMLImageElement | null = null;
    private prevBtn: HTMLButtonElement | null = null;
    private nextBtn: HTMLButtonElement | null = null;
    private closeBtn: HTMLButtonElement | null = null;
    private counter: HTMLElement | null = null;
    private images: string[] = [];
    private currentIndex: number = 0;

    constructor() {
      this.lb = document.getElementById('lightbox');
      if (!this.lb) return;

      this.img = this.lb.querySelector('.lightbox__img');
      this.prevBtn = this.lb.querySelector('.lb-prev');
      this.nextBtn = this.lb.querySelector('.lb-next');
      this.closeBtn = this.lb.querySelector('.lb-close');
      this.counter = this.lb.querySelector('.lb-count');

      this.setupListeners();
    }

    private setupListeners() {
      // Click on zoomable images - use mousedown for better reliability
      document.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        if (!(target instanceof HTMLImageElement) || !target.classList.contains('zoomable')) return;

        // Check if parent expanded section is visible
        const expanded = target.closest('.expanded-section') as HTMLElement;
        if (!expanded || getComputedStyle(expanded).display === 'none') return;

        console.log('Image clicked!', target.src); // Debug

        // Check if it's part of a gallery
        const strip = target.closest('.image-strip');
        if (strip) {
          const allImages = Array.from(strip.querySelectorAll('img.zoomable')) as HTMLImageElement[];
          this.images = allImages.map(img => img.getAttribute('data-lightbox-src') || img.src);
          this.currentIndex = Number(target.getAttribute('data-index')) || 0;
        } else {
          // Single image
          this.images = [target.getAttribute('data-lightbox-src') || target.src];
          this.currentIndex = 0;
        }

        this.open();
      }, false);

      // Navigation buttons
      this.prevBtn?.addEventListener('click', (e) => {
        e.stopPropagation();
        this.navigate(-1);
      });

      this.nextBtn?.addEventListener('click', (e) => {
        e.stopPropagation();
        this.navigate(1);
      });

      // Close button
      this.closeBtn?.addEventListener('click', () => this.close());

      // Click backdrop to close
      this.lb?.addEventListener('click', (e) => {
        if (e.target === this.lb) this.close();
      });

      // Keyboard navigation
      document.addEventListener('keydown', (e) => {
        if (!this.lb?.classList.contains('open')) return;

        switch (e.key) {
          case 'Escape':
            this.close();
            break;
          case 'ArrowLeft':
            this.navigate(-1);
            break;
          case 'ArrowRight':
            this.navigate(1);
            break;
        }
      });
    }

    private open() {
      this.lb?.classList.add('open');
      document.body.style.overflow = 'hidden';
      this.show();
    }

    private close() {
      this.lb?.classList.remove('open');
      document.body.style.overflow = '';
    }

    private navigate(direction: number) {
      this.currentIndex += direction;
      if (this.currentIndex < 0) this.currentIndex = 0;
      if (this.currentIndex >= this.images.length) this.currentIndex = this.images.length - 1;
      this.show();
    }

    private show() {
      if (!this.img) return;

      this.img.src = this.images[this.currentIndex];
      this.img.alt = `Screenshot ${this.currentIndex + 1}`;

      // Update counter
      if (this.counter) {
        if (this.images.length > 1) {
          this.counter.textContent = `${this.currentIndex + 1} / ${this.images.length}`;
          this.counter.style.display = 'block';
        } else {
          this.counter.style.display = 'none';
        }
      }

      // Update button states
      if (this.prevBtn) {
        this.prevBtn.disabled = this.currentIndex === 0;
      }
      if (this.nextBtn) {
        this.nextBtn.disabled = this.currentIndex === this.images.length - 1;
      }
    }
  }

  // Initialize lightbox
  new Lightbox();
</script>